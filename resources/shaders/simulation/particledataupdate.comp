#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

#include "common.comp"

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0, set = 0) buffer Particles
{
    ParticleData particles[];
};

layout(push_constant) uniform constants {
    float timestep;
};

void main (void)
{
    uint gid = gl_GlobalInvocationID.x;
    ParticleData data = particles[gid];
    vec3 position = data.position;
    // Reflective boundary with 0.4 dampening factor.
    {
        vec3 cornerToPosition = position - vec3(-63,-63,-63);
        cornerToPosition *= vec3(lessThan(cornerToPosition, vec3(0,0,0))) * (-1.4) + 1;
        position = vec3(-63,-63,-63) + cornerToPosition;
    }
    {
        vec3 cornerToPosition = position - vec3(63,63,63);
        cornerToPosition *= vec3(greaterThan(cornerToPosition, vec3(0,0,0))) * (-1.4) + 1;
        position = vec3(63,63,63) + cornerToPosition;
    }
    data.velocity = (position - data.oldPosition) / timestep;
    particles[gid] = data;
}
