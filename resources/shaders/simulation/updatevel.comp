#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

#include "common.comp"

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0, set = 0) readonly buffer ParticleKeys
{
    ParticleKey particleKeys[];
};

layout(std430, binding = 0, set = 2) readonly buffer VorticityBuffer
{
    vec4 vorticities[];
};

layout(std430, binding = 0, set = 3) readonly buffer Particles
{
    ParticleData particles[];
};

layout(std430, binding = 0, set = 4) writeonly buffer OutputParticles
{
    ParticleData outputParticles[];
};

layout(push_constant) uniform constants {
    float timestep;
};

void main(void)
{
    uint gid = gl_GlobalInvocationID.x;
    ParticleKey key = particleKeys[gid];
    vec3 position = key.position;

    vec3 deltap = vec3 (0, 0, 0);

    float tensile_instability_scale = 1.0f / Wpoly6 (0.2f);

    vec3 gradVorticity = vec3(0,0,0);

    FOR_EACH_NEIGHBOUR(gid, j)
    {
        vec3 position_j = particleKeys[j].position;
        vec3 p_ij = position - position_j;
        vec3 grad = gradWspiky(p_ij);
        gradVorticity += vorticities[j].w * grad;
    }
    END_FOR_EACH_NEIGHBOUR()

    vec3 velocity = particles[key.index].velocity;

    float l = length(gradVorticity);
    if (l > 0.001)
            gradVorticity /= l;
    velocity += timestep * vorticity_epsilon * cross(gradVorticity, vorticities[gid].xyz);

    outputParticles[key.index].velocity = velocity;
}