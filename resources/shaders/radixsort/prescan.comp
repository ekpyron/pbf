#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

const uint HALFBLOCKSIZE = gl_WorkGroupSize.x;
const uint BLOCKSIZE = 2 * HALFBLOCKSIZE;

layout(std430, binding = 0, set = 0) writeonly buffer PrefixSums
{
    uint prefixSum[];
};

layout(std430, binding = 1, set = 0) writeonly buffer BlockSums
{
    uint blockSum[];
};

layout(push_constant) uniform constants {
    uvec4 blockSumOffsets;
    int bitShift;
};

shared uvec4 tmp[BLOCKSIZE];

uint GetHash(uint);

void main()
{
    uint bits1 = bitfieldExtract(GetHash(gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex), bitShift, 2);
    uint bits2 = bitfieldExtract(GetHash(gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex + HALFBLOCKSIZE), bitShift, 2);

    tmp[gl_LocalInvocationIndex] = uvec4(equal(bits1 * uvec4(1,1,1,1), uvec4(0,1,2,3)));
    tmp[gl_LocalInvocationIndex + HALFBLOCKSIZE] = uvec4(equal(bits2 * uvec4(1,1,1,1), uvec4(0,1,2,3)));


    int offset = 1;
    for (uint d = HALFBLOCKSIZE; d > 0; d /= 2)
    {
        barrier();

        if (gl_LocalInvocationIndex < d) {
            uint i = offset * (2 * gl_LocalInvocationIndex + 1) - 1;
            uint j = offset * (2 * gl_LocalInvocationIndex + 2) - 1;
            tmp[j] += tmp[i];
        }
        offset *= 2;
    }

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        for(uint i = 0; i < 4; ++i)
        blockSum[blockSumOffsets[i] + gl_WorkGroupID.x] = tmp[BLOCKSIZE - 1][i];
        tmp[BLOCKSIZE - 1] = uvec4(0, 0, 0, 0);
    }

    for (uint d = 1; d < BLOCKSIZE; d *= 2)
    {
        offset /= 2;
        barrier();

        if (gl_LocalInvocationIndex < d)
        {
            uint i = offset * (2 * gl_LocalInvocationIndex + 1) - 1;
            uint j = offset * (2 * gl_LocalInvocationIndex + 2) - 1;
            uvec4 t = tmp[i];
            tmp[i] = tmp[j];
            tmp[j] += t;
        }
    }

    barrier();

    prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex] = tmp[gl_LocalInvocationIndex][bits1];
    prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex + HALFBLOCKSIZE] = tmp[gl_LocalInvocationIndex + HALFBLOCKSIZE][bits2];
}