#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

const uint HALFBLOCKSIZE = gl_WorkGroupSize.x;
const uint BLOCKSIZE = 2 * HALFBLOCKSIZE;

layout(std430, binding = 0, set = 0) buffer PrefixSums
{
    uint prefixSum[];
};

layout(std430, binding = 1, set = 0) buffer BlockSums
{
    uint blockSum[];
};

shared uint tmp[BLOCKSIZE];

void main()
{
    tmp[gl_LocalInvocationIndex] = prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex];
    tmp[gl_LocalInvocationIndex + HALFBLOCKSIZE] = prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex + HALFBLOCKSIZE];


    int offset = 1;
    for (uint d = HALFBLOCKSIZE; d > 0; d /= 2)
    {
        barrier();

        if (gl_LocalInvocationIndex < d) {
            uint i = offset * (2 * gl_LocalInvocationIndex + 1) - 1;
            uint j = offset * (2 * gl_LocalInvocationIndex + 2) - 1;
            tmp[j] += tmp[i];
        }
        offset *= 2;
    }

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        blockSum[gl_WorkGroupID.x] = tmp[BLOCKSIZE - 1];
        tmp[BLOCKSIZE - 1] = 0;
    }
    barrier();

    {
        for(uint d = 1; d < BLOCKSIZE; d *= 2)
        {
            offset /= 2;
            barrier();

            if (gl_LocalInvocationIndex < d)
            {
                uint i = offset * (2 * gl_LocalInvocationIndex + 1) - 1;
                uint j = offset * (2 * gl_LocalInvocationIndex + 2) - 1;
                uint t = tmp[i];
                tmp[i] = tmp[j];
                tmp[j] += t;
            }
        }
    }

    barrier();

    prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex] = tmp[gl_LocalInvocationIndex];
    prefixSum[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex + HALFBLOCKSIZE] = tmp[gl_LocalInvocationIndex + HALFBLOCKSIZE];
}
