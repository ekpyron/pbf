#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

/*#define HALFBLOCKSIZE 128
#define BLOCKSIZE (2*HALFBLOCKSIZE)*/
layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

const uint HALFBLOCKSIZE = gl_WorkGroupSize.x;
const uint BLOCKSIZE = 2 * HALFBLOCKSIZE;

struct ParticleData {
    vec3 position;
    float aux;
};

layout(std430, binding = 2) readonly buffer particleInputData
{
    ParticleData inputData[];
};


layout(std430, binding = 0) writeonly buffer ParticleSortKeys
{
    uint particleSortKeys[];
};

layout(std430, binding = 3) writeonly buffer particleOutputData
{
    ParticleData outputData[];
};

layout(std430, binding = 1) writeonly buffer BlockSumOutput
{
    uint blocksums[];
};


uvec3 GRID_HASHWEIGHTS = uvec3(1,0,0); // uvec3(1, 64, 64*64);
vec3 GRID_MAX = vec3(31, 31, 31);
vec3 GRID_MIN = vec3(-32, -32, -32);

uint GetHash (in vec3 pos)
{
    ivec3 grid = ivec3 (clamp (pos.xyz, GRID_MIN, GRID_MAX));
    return uint (dot (grid - GRID_MIN, GRID_HASHWEIGHTS));
}

layout(constant_id = 1) const uint selectedBit = 0;

shared uint tmp[BLOCKSIZE];

void do_scan();

void main() {

    // gl_WorkGroupID.x
    // gl_LocalInvocationIndex

    ParticleData currentParticle1 = inputData[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex];
    ParticleData currentParticle2 = inputData[gl_WorkGroupID.x * BLOCKSIZE + gl_LocalInvocationIndex + HALFBLOCKSIZE];
    uint hash1 = GetHash(currentParticle1.position);
    uint hash2 = GetHash(currentParticle2.position);

    tmp[gl_LocalInvocationIndex * 2] = (hash1 >> selectedBit) & 1u;
    tmp[gl_LocalInvocationIndex * 2 + 1] = (hash2 >> selectedBit) & 1u;

    do_scan();
}
