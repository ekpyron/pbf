struct ParticleKey {
    vec3 position;
    uint index;
};

struct ParticleData {
    vec3 position;
    uint aux;
    vec3 velocity;
};

struct GridBoundaries {
    uint startIndex;
    uint endIndex;
};

#define FOR_EACH_NEIGHBOUR(gid, idx) \
for (int _x = -1; _x <= 1; ++_x) { \
for (int _y = -1; _y <= 1; ++_y) { \
for (int _z = -1; _z <= 1; ++_z) { \
vec3 _position = particleKeys[gid].position + vec3(_x,_y,_z); \
if (!(any(lessThan(_position, vec3(GRID_MIN)))) && all(lessThan(_position, vec3(GRID_MAX)))) { \
GridBoundaries _gridCell = grid[GetGridIndex(_position)]; \
for (uint idx = _gridCell.startIndex; idx < _gridCell.endIndex; ++idx) { \
if (idx != gid) { \
if (distance(particleKeys[idx].position, particleKeys[gid].position) < 1.0) {

#define END_FOR_EACH_NEIGHBOUR() }}}}}}}

layout(std140, binding = 1, set = 0) uniform GridData {
    ivec3 GRID_MAX;
    ivec3 GRID_MIN;
    ivec3 GRID_HASHWEIGHTS;
};

layout(std430, binding = 0, set = 1) readonly buffer GridBoundaryBuffer
{
    GridBoundaries grid[]; // .x: start; .y: end
};

uint GetGridIndex(vec3 position) {
    ivec3 gridPositive = ivec3(floor(position)) - GRID_MIN;
    return uint(gridPositive.x * GRID_HASHWEIGHTS.x + gridPositive.y * GRID_HASHWEIGHTS.y + gridPositive.z * GRID_HASHWEIGHTS.z);
}


const float h = 2.5; // TODO
const float one_over_rho_0 = 1.0;
const float epsilon = 5.0;
const float xsph_viscosity_c = 0.01;
//const float xsph_viscosity_c = 0.03;
const float tensile_instability_k = 0.1;
const float vorticity_epsilon = 5;

float Wpoly6(float r)
{
    if (r > h)
    return 0;
    float tmp = h * h - r * r;
    return 1.56668147106 * tmp * tmp * tmp / (h*h*h*h*h*h*h*h*h);
}

float Wspiky(float r)
{
    if (r > h)
    return 0;
    float tmp = h - r;
    return 4.774648292756860 * tmp * tmp * tmp / (h*h*h*h*h*h);
}

vec3 gradWspiky(vec3 r)
{
    float l = length (r);
    if (l > h)
    return vec3 (0, 0, 0);
    // TODO: carefully re-evaluate.
    if (l < 0.01) l = 0.01;
    float tmp = h - l;
    return (-3 * 4.774648292756860 * tmp * tmp) * r / (l * h*h*h*h*h*h);
}
