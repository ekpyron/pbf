#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

struct ParticleKey {
    vec3 position;
    uint index;
};

layout(std430, binding = 0, set = 0) readonly buffer ParticleKeys
{
    ParticleKey particleKeys[];
};

struct GridBoundaries {
    uint startIndex;
    uint endIndex;
};

layout(std140, binding = 1, set = 0) uniform GridData {
    ivec3 GRID_MAX;
    ivec3 GRID_MIN;
    ivec3 GRID_HASHWEIGHTS;
};

layout(std430, binding = 0, set = 1) readonly buffer GridBoundaryBuffer
{
    GridBoundaries grid[]; // .x: start; .y: end
};
uint GetGridIndex(vec3 position) {
    ivec3 gridPositive = ivec3(floor(position)) - GRID_MIN;
    return uint(gridPositive.x * GRID_HASHWEIGHTS.x + gridPositive.y * GRID_HASHWEIGHTS.y + gridPositive.z * GRID_HASHWEIGHTS.z);
}


#define FOR_EACH_NEIGHBOUR(gid, idx) \
for (int _x = -1; _x <= 1; ++_x) { \
for (int _y = -1; _y <= 1; ++_y) { \
for (int _z = -1; _z <= 1; ++_z) { \
vec3 _position = particleKeys[gid].position + vec3(_x,_y,_z); \
if (!(any(lessThan(_position, vec3(GRID_MIN)))) && all(lessThan(_position, vec3(GRID_MAX)))) { \
GridBoundaries _gridCell = grid[GetGridIndex(particleKeys[gid].position + vec3(_x,_y,_z))]; \
for (uint idx = _gridCell.startIndex; idx < _gridCell.endIndex; ++idx) { \
if (idx != gid) { \
if (distance(particleKeys[idx].position, particleKeys[gid].position) < 1.0) {

#define END_FOR_EACH_NEIGHBOUR() }}}}}}}

layout(std430, binding = 0, set = 2) writeonly buffer VorticityBuffer
{
    vec4 vorticities[];
};


struct ParticleData {
    vec3 position;
    uint aux;
    vec3 velocity;
};

layout(std430, binding = 0, set = 3) readonly buffer Particles
{
    ParticleData particles[];
};


layout(std430, binding = 0, set = 4) writeonly buffer NextParticles
{
    ParticleData nextParticles[];
};

const float h = 2.5;

float Wpoly6(float r)
{
    if (r > h)
    return 0;
    float tmp = h * h - r * r;
    return 1.56668147106 * tmp * tmp * tmp / (h*h*h*h*h*h*h*h*h);
}

const float one_over_rho_0 = 1.0;
const float epsilon = 5.0;
//const float xsph_viscosity_c = 0.01;
const float xsph_viscosity_c = 0.01;

float Wspiky(float r)
{
    if (r > h)
    return 0;
    float tmp = h - r;
    return 4.774648292756860 * tmp * tmp * tmp / (h*h*h*h*h*h);
}

vec3 gradWspiky(vec3 r)
{
    float l = length (r);
    if (l > h)
        return vec3 (0, 0, 0);
    // TODO: carefully re-evaluate.
    if (l < 0.01) l = 0.01;
    float tmp = h - l;
    return (-3 * 4.774648292756860 * tmp * tmp) * r / (l * h*h*h*h*h*h);
}

void main(void)
{
    uint gid = gl_GlobalInvocationID.x;
    ParticleKey key = particleKeys[gid];
    vec3 position = key.position;

    vec3 velocity = particles[key.index].velocity;

    float sum_k_grad_Ci = 0;
    float rho = 0;

    vec3 grad_pi_Ci = vec3 (0, 0, 0);

    vec3 vorticity = vec3(0,0,0);
    vec3 v = vec3(0,0,0);
    // TODO: cleanup
    FOR_EACH_NEIGHBOUR(gid, j)
    {
        ParticleKey key_j = particleKeys[j];
        vec3 position_j = key_j.position;
        vec3 velocity_j = particles[key_j.index].velocity;

        vec3 v_ij = velocity_j - velocity;
        vec3 p_ij = position - position_j;

        // compute rho_i (equation 2)
        float len = length(p_ij);
        float tmp = Wpoly6 (len);
        rho += tmp;

        v += v_ij * tmp;


        // sum gradients of Ci (equation 8 and parts of equation 9)
        // use j as k so that we can stay in the same loop
        vec3 grad_pk_Ci = gradWspiky (p_ij);
        vorticity += cross(v_ij, grad_pk_Ci);
    }
    END_FOR_EACH_NEIGHBOUR()

    vec3 nextVelocity = velocity + xsph_viscosity_c * v;
    nextParticles[key.index].velocity = nextVelocity;

    vec4 vorticityAndLength = vec4(vorticity, length(vorticity));
    vorticities[gid] = vorticityAndLength;
}