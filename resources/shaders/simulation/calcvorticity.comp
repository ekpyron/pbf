#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_basic : enable

#include "common.comp"

layout (local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0, set = 0) readonly buffer ParticleKeys
{
    ParticleKey particleKeys[];
};

layout(std430, binding = 0, set = 2) writeonly buffer VorticityBuffer
{
    vec4 vorticities[];
};

layout(std430, binding = 0, set = 3) readonly buffer Particles
{
    ParticleData particles[];
};

layout(std430, binding = 0, set = 4) writeonly buffer NextParticles
{
    ParticleData nextParticles[];
};

void main(void)
{
    uint gid = gl_GlobalInvocationID.x;
    ParticleKey key = particleKeys[gid];
    vec3 position = key.position;

    vec3 velocity = particles[key.index].velocity;

    float sum_k_grad_Ci = 0;
    float rho = 0;

    vec3 grad_pi_Ci = vec3 (0, 0, 0);

    vec3 vorticity = vec3(0,0,0);
    vec3 v = vec3(0,0,0);
    // TODO: cleanup
    FOR_EACH_NEIGHBOUR(gid, j)
    {
        ParticleKey key_j = particleKeys[j];
        vec3 position_j = key_j.position;
        vec3 velocity_j = particles[key_j.index].velocity;

        vec3 v_ij = velocity_j - velocity;
        vec3 p_ij = position - position_j;

        // compute rho_i (equation 2)
        float len = length(p_ij);
        float tmp = Wpoly6 (len);
        rho += tmp;

        v += v_ij * tmp;


        // sum gradients of Ci (equation 8 and parts of equation 9)
        // use j as k so that we can stay in the same loop
        vec3 grad_pk_Ci = gradWspiky (p_ij);
        vorticity += cross(v_ij, grad_pk_Ci);
    }
    END_FOR_EACH_NEIGHBOUR()

    vec3 nextVelocity = velocity + xsph_viscosity_c * v;
    nextParticles[key.index].velocity = nextVelocity;

    vec4 vorticityAndLength = vec4(vorticity, length(vorticity));
    vorticities[gid] = vorticityAndLength;
}